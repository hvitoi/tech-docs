trigger:
  - master
pool:
  vmImage: "ubuntu-latest"
variables:
  - name: DEV_ENVIRONMENT
    value: dev
  - name: QA_ENVIRONMENT
    value: qa

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
          # Download artifact (if not defined it's downloaded anyway to $(Pipeline.Workspace/{artifact}))
          # - task: DownloadPipelineArtifact@2
          #   inputs:
          #     artifact: WebApp

          # Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/terraform-manifests" # copy from "terraform-manifests" folder in git repo
              artifact: "terraform-manifests-out" # copy to "$(Pipeline.Workspace)/terraform-manifests-out"
              publishLocation: "pipeline" # Publish to Azure Pipelines

          # Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
          - task: TerraformInstaller@0
            displayName: Terraform Install
            inputs:
              terraformVersion: "latest"

          # Initialize terraform
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform-manifests"
              allowTelemetryCollection: false

              # add tfstate file storage configuration
              backendType: "azurerm"
              backendServiceArm: "terraform-aks-azurerm-svc-con" # service connection in azure devops
              backendAzureRmResourceGroupName: "terraform-storage-rg"
              backendAzureRmStorageAccountName: "terraform-storage-sa"
              backendAzureRmContainerName: "tfstatefiles"
              backendAzureRmKey: "aks-base.tfstate" # name of the .tfstate file

          # Validate Terraform Manifests
          - task: TerraformCLI@0
            displayName: Terraform Validate
            inputs:
              command: "validate"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform-manifests"
              allowTelemetryCollection: false

  - stage: DeployAKSClusters
    jobs:
      # Deploy Dev AKS Cluster
      - deployment: DeployDevAKSCluster # Deployment jobs keep the history for auditing and you can set a deployment strategy (runOnce, rolling, canary)
        displayName: DeployDevAKSCluster
        pool:
          vmImage: "ubuntu-latest"
        environment: $(DEV_ENVIRONMENT) # "environment" tab is created in the portal
        strategy:
          runOnce:
            deploy:
              steps:
                # Download SSH Secure File
                - task: DownloadSecureFile@1
                  displayName: Download SSH Key
                  name: sshkey
                  inputs:
                    secureFile: "aks-terraform-devops-ssh-key-ububtu.pub"

                # Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
                - task: TerraformCLI@0
                  displayName: Terraform Init
                  inputs:
                    command: "init"
                    workingDirectory: "$(Pipeline.Workspace)/terraform-manifests-out"
                    backendType: "azurerm"
                    backendServiceArm: "terraform-aks-azurerm-svc-con"
                    backendAzureRmResourceGroupName: "terraform-storage-rg"
                    backendAzureRmStorageAccountName: "terraform-storage-sa"
                    backendAzureRmContainerName: "tfstatefiles"
                    backendAzureRmKey: "aks-$(DEV_ENVIRONMENT).tfstate"
                    allowTelemetryCollection: false

                # Terraform Plan (Create Plan)
                - task: TerraformCLI@0
                  displayName: Terraform Plan
                  inputs:
                    command: "plan"
                    workingDirectory: "$(Pipeline.Workspace)/terraform-manifests-out"
                    environmentServiceName: "terraform-aks-azurerm-svc-con"
                    commandOptions: "-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out"
                    allowTelemetryCollection: false

                # Terraform Apply (Use the plan created in previous step)
                - task: TerraformCLI@0
                  displayName: Terraform Apply
                  inputs:
                    command: "apply"
                    workingDirectory: "$(Pipeline.Workspace)/terraform-manifests-out"
                    environmentServiceName: "terraform-aks-azurerm-svc-con"
                    commandOptions: "$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out"
                    allowTelemetryCollection: false

      # Deploy QA AKS Cluster
      - deployment: DeployQAAKSCluster
        dependsOn: DeployDevAKSCluster # deploy dev first
        displayName: DeployQAAKSCluster
        pool:
          vmImage: "ubuntu-latest"
        environment: $(QA_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
                # Download Secure File
                - task: DownloadSecureFile@1
                  displayName: Download SSH Key
                  name: sshkey
                  inputs:
                    secureFile: "aks-terraform-devops-ssh-key-ububtu.pub"

                # Terraform Initialize (State Storage to store in Azure Storage Account)
                - task: TerraformCLI@0
                  displayName: Terraform Init
                  inputs:
                    command: "init"
                    workingDirectory: "$(Pipeline.Workspace)/terraform-manifests-out"
                    backendType: "azurerm"
                    backendServiceArm: "terraform-aks-azurerm-svc-con"
                    backendAzureRmResourceGroupName: "terraform-storage-rg"
                    backendAzureRmStorageAccountName: "terraformstatexlrwdrzs"
                    backendAzureRmContainerName: "tfstatefiles"
                    backendAzureRmKey: "aks-$(QA_ENVIRONMENT).tfstate"
                    allowTelemetryCollection: false

                # Terraform Plan
                - task: TerraformCLI@0
                  displayName: Terraform Plan
                  inputs:
                    command: "plan"
                    workingDirectory: "$(Pipeline.Workspace)/terraform-manifests-out"
                    environmentServiceName: "terraform-aks-azurerm-svc-con"
                    commandOptions: "-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(QA_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out"
                    allowTelemetryCollection: false

                # Terraform Apply
                - task: TerraformCLI@0
                  displayName: Terraform Apply
                  inputs:
                    command: "apply"
                    workingDirectory: "$(Pipeline.Workspace)/terraform-manifests-out"
                    environmentServiceName: "terraform-aks-azurerm-svc-con"
                    commandOptions: "$(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out"
                    allowTelemetryCollection: false

# https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

# export REPOSITORY_URI=123456789012.dkr.ecr.us-east-1.amazonaws.com/my-app
# export EKS_KUBECTL_ROLE_ARN=arn:aws:iam::123456789012:role/EksCodeBuildKubectlRole
# export EKS_CLUSTER_NAME=my-cluster

version: 0.2
phases:
  install:
    commands:
      # In this phase you should install all the required tools and command-line utils for build your code
      # Using latest Amazon Linux docker image most of the necessary tools are already available
      - echo "Nothing to do here"

  pre_build:
    commands:
      # Docker Image Tag
      - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"

      # Update Kubernetes Manifest with the tag ("CONTAINER_IMAGE" is a placeholder string at the manifest template)
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' my-deployment.yaml

      # Login to ECR registry
      - aws ecr get-login --no-include-email

      # Set kubeconfig location
      - export KUBECONFIG=$HOME/.kube/config

  build:
    commands:
      # Build docker image
      - docker image build --tag $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      # Push image to ECR repository
      - docker push $REPOSITORY_URI:$TAG

      # Setup AWS temporary credentials from assumed role
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')

      # Generate kubeconfig
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

      # Apply updated Kubernetes Manifest
      - kubectl apply -f my-deployment.yaml

      # Create the build artifacts (to be used in other stages)
      - printf '[{"name":"my-deployment.yaml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json

artifacts:
  files:
    - build.json
    - my-deployment.yaml
